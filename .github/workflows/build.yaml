name: OpenWrt Builder

on:
  workflow_dispatch:
  # push:
  # schedule:
  #  - cron: "0 18 * * *"

env:
  REMOTE_REPOSITORY: gtolog/openwrt-ipq
  # REMOTE_REPOSITORY: AgustinLorenzo/openwrt
  REMOTE_BRANCH: 24.10-nss-re-cs-07
  # REMOTE_BRANCH: main_nss
  CONFIG_FILE: build.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: openwrt-qualcommax-ipq60xx
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x
  
  TZ: Asia/Shanghai

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-24.04
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_nss_packages_repo_new_commits.outputs.new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_nss_packages_repo_new_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT
      - name: Check for new commits in NSS Packages Repository
        id: check_nss_packages_repo_new_commits
        run: |
          nss_packages_repo_latest_commit_sha=$(curl -sL "https://api.github.com/repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits?sha=${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          nss_packages_repo_last_built_commit_sha=$(curl -sL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'NSS Packages Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$nss_packages_repo_latest_commit_sha" != "$nss_packages_repo_last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$nss_packages_repo_latest_commit_sha" >> $GITHUB_OUTPUT
          
  build:
    name: Build OpenWrt
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || needs.check_commits.outputs.nss_packages_repo_new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04
    steps:
      - name: Debug output values
        run: |
          echo "Latest commit sha from remote repository: ${{ steps.check_new_commits.outputs.latest_commit_sha }}"
          echo "Latest commit sha from NSS packages repository: ${{ steps.check_nss_packages_repo_new_commits.outputs.latest_commit_sha }}"
      
      - name: Free up disk space before installation
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc /usr/local/share/boost
          sudo apt-get clean
          sudo apt-get autoremove -y
          echo "After cleanup:"
          df -h
          
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt full-upgrade -y
          sudo apt-get clean
          sudo apt-get autoremove -y
      
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}
      
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "custom_repo"

      - name: Add extra packages
        run: |
          # Clone extra LuCI packages directly into the correct directory
          git clone --depth=1 --single-branch https://github.com/gSpotx2f/luci-app-temp-status package/extra-packages/luci-app-temp-status
          git clone --depth=1 --single-branch https://github.com/gSpotx2f/luci-app-cpu-status-mini package/extra-packages/luci-app-cpu-status-mini
          git clone --depth=1 --single-branch https://github.com/sbwml/luci-app-airconnect package/extra-packages/luci-app-airconnect

          # Clone only msd_lite from immortalwrt without unnecessary files
          git clone --depth=1 --filter=blob:none --sparse --single-branch --no-checkout https://github.com/immortalwrt/packages.git package/extra-packages/immortalwrt-packages
          git -C package/extra-packages/immortalwrt-packages sparse-checkout set net/msd_lite
          git -C package/extra-packages/immortalwrt-packages checkout
          # Keep msd_lite inside extra-packages to maintain structure
          mv package/extra-packages/immortalwrt-packages/net/msd_lite package/extra-packages/
          rm -rf package/extra-packages/immortalwrt-packages

      # Cache the OpenWrt feeds
      - name: Cache OpenWrt feeds
        uses: actions/cache@v3
        with:
          path: |
            ~/.opkg
            ./dl
          key: ${{ runner.os }}-opkg-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-opkg-

      # Cache the OpenWrt build directory
      - name: Cache OpenWrt build directory
        uses: actions/cache@v3
        with:
          path: ./build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: Configure firmware image
        run: |
          mv custom_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)
      
      - name: Include custom files
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          mv custom_repo/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }}

      - name: Download dependencies
        run: make download -j$(nproc)

      - name: Build the firmware image
        run: make world -j$(nproc)
        
      - name: Clean up before packaging
        run: |
          rm -rf bin/targets/qualcommax/ipq60xx/*.tmp
          rm -rf build_dir/*
          
      - name: Package output
        run: tar -cvf ipq60xx-images.tar bin/targets/qualcommax/ipq60xx
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq60xx-images
          path: ipq60xx-images.tar

  release:
    name: Create release
    needs: [build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq60xx-images
      
      - name: Extract artifacts
        run: tar xf ipq60xx-images.tar
      
      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: bin/targets/qualcommax/ipq60xx/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: Updated prebuilt images ${{ env.RELEASE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            Updated prebuilt images for ${{ env.RELEASE_DATE }}
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
      
      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
